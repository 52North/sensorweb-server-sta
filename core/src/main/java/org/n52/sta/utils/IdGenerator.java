/*
 * Copyright (C) 2018-2022 52Â°North Initiative for Geospatial Open Source
 * Software GmbH
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */
package org.n52.sta.utils;


import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

import org.joda.time.DateTime;

/**
 * Class to generate an id by using MessageDigest SHA-256 and a random double
 *
 * @since 7.3.0
 *
 */
public class IdGenerator {

    /**
     * Message digest for generating single identifier
     */
    private static final MessageDigest MESSAGE_DIGEST;
    private static final Random RANDOM;

    /*
     * Instantiation of the message digest
     */
    static {
        try {
            MESSAGE_DIGEST = MessageDigest.getInstance("SHA-256");
            RANDOM = new Random();
        } catch (final NoSuchAlgorithmException nsae) {
            throw new Error("Error while getting SHA-256 messagedigest!", nsae);
        }
    }

    /**
     * Generates a uuid from message.
     *
     * @param message
     *                smessage
     *
     * @return generated uuid id as hex SHA-256.
     */
    public static String generate(String message) {
        return bytesToHex(MESSAGE_DIGEST.digest(message.getBytes(StandardCharsets.UTF_8)));
    }

    /**
     * Generates a a uuid from message and current time as long.
     *
     * @param message
     *                message
     *
     * @return generated uuid id as hex SHA-256.
     */
    public static String generateWithRandom(String message) {
        final long autoGeneratedID = new DateTime().getMillis();
        final String concate = RANDOM.nextDouble() + message + autoGeneratedID;
        return bytesToHex(MESSAGE_DIGEST.digest(concate.getBytes(StandardCharsets.UTF_8)));
    }

    /**
     * Transforms byte to hex representation
     *
     * @param bytes
     *          bytes
     *
     * @return hex
     */
    private static String bytesToHex(byte[] bytes) {
        StringBuilder buffer = new StringBuilder(2 * bytes.length);
        for (byte b : bytes) {
            buffer.append(Character.forDigit((b >> 4) & 0xF, 16));
            buffer.append(Character.forDigit(b & 0xF, 16));
        }
        return buffer.toString();
    }

}
